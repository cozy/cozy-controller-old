#!/usr/bin/env node

var path = require('path'),
    util = require('util'),
    fs = require('fs'),
    haibu = require('../lib/haibu'),
    fs = require('fs'),
    flatiron = require('flatiron'),
    metadata = require("../package.json"),
    app = flatiron.app;

app.use(flatiron.plugins.cli, {
  usage: haibu.common.welcome.concat([
    'Commands:',
    '  start                    Start the server.',
    '  help                     You\'re looking at it!'
  ]),

  argv: {
    address: {
      alias: 'a',
      description: 'IP address for the server to bind to.',
      string: true,
      default: 'dynamic'
    },
    port: {
      alias: 'p',
      description: 'Port for the server to listen on.',
      check: function(argv) {
        if (isNaN(parseInt(argv.port))) return false;
      },
      default: 9002
    },
    env: {
      alias: 'e',
      description: 'Environment to run the server in.',
      string: true,
      default: 'development'
    },
    logger: {
      description: 'Use the Haibu Logger plugin.',
      boolean: true
    },
    'advanced-replies': {
      description: 'Send extra info with replies.',
      boolean: true
    },
    silent: {
      alias: 's',
      description: 'Suppress the log messages from the output.',
      boolean: true
    },
    useraccounts: {
      alias: 'u',
      description: 'Use the Haibu User Accounts plugin.',
      boolean: true
    },
    permissions: {
      alias: 'per',
      description: 'Change applications directories permissions.',
      check: function(argv) {
        if (isNaN(parseInt(argv.permissions)))  return false;
      },
      default: 700
    },
    dir: {
      alias: 'd',
      description: 'Change applications repertories.',
      string: true,
      default: '/usr/local/cozy'
    },
    authToken: {
      alias: 'auth',
      description: 'Add authentication token',
      boolean: true
    },
    tokensDir: {
      description: 'Change tokens directory',
      string:true,
      default: '/etc/cozy/tokens'
    },
    pidsDir: {
      description: 'Change pids directory',
      string:true,
      default: '/etc/cozy/pids'
    },
    version: {
      alias: 'V',
      description: 'Display controller version',
      boolean: false,
    },
    help: {
      alias: 'h',
      description: 'You\'re looking at it!',
      boolean: true
    }
  }
});

if (!process.env.NODE_ENV) {
  process.env.NODE_ENV = "development"
}


var start = app.commands.start = function(address, port, env) {
  address = address || app.argv.address         || haibu.common.ipAddress();
  port    = port    || parseInt(app.argv.port)  || 9002;
  env     = env     || app.argv.env             || 'development';

  if (app.argv.useraccounts) {
    haibu.use(haibu.useraccounts, {"permissions": app.argv.permissions});
    haibu.config.set('permissions', app.argv.permissions);
  }

  if (app.argv.coffee) {
    haibu.use(haibu.coffee, {});
  }

  if (app.argv['advanced-replies']) {
    haibu.use(haibu['advanced-replies'], {});
  }

  if (app.argv['version']){
    console.log(metadata['version'])
    process.exit()
  }

  haibu.config.set('directories:apps', app.argv.dir+'/apps');
  haibu.config.set('directories:autostart', app.argv.dir+'/autostart');
  haibu.config.set('directories:config', app.argv.dir+'/config');
  haibu.config.set('directories:packages', app.argv.dir+'/packages');
  haibu.config.set('directories:tmp', app.argv.dir+'/tmp');
  haibu.config.set('directories:pid', app.argv.pidsDir);
  haibu.config.set('directories:token', app.argv.tokensDir);

  if (app.argv.authToken != '') {
    if (fs.existsSync('/etc/cozy/controller.token')){
      fs.readFile('/etc/cozy/controller.token', 'utf8', function(err, data) {
        token = data.split('\n')[0]
        haibu.config.set('authToken', token);
      });
    } else {
      console.log("Option auth cannot work : file '/etc/cozy/controller.token doesn't exist");
    }
  }

  haibu.config.file({ file: path.join(__dirname, '..', 'config', 'config.json') });
  if (!fs.existsSync('/etc/cozy')){
    fs.mkdirSync('/etc/cozy')
  }
  if (!fs.existsSync('/etc/cozy/pids')){
    fs.mkdirSync('/etc/cozy/pids')
  }
  pidFile = path.join(haibu.config.get('directories:pid'), 'controller.pid');
  if (!fs.existsSync(pidFile)) {
    fs.openSync(pidFile, 'w')
  }
  fs.chmod(pidFile, 0700, function (err) {
    fs.writeFileSync(pidFile, process.pid);
  });
  haibu.config.set('registry', null) 
  if (fs.existsSync('/etc/cozy/cozy-controller.conf')){
    data = fs.readFileSync('/etc/cozy/cozy-controller.conf', 'utf8')
    configs = data.split('\n')
    for (var i = 0, c = configs.length; i < c; i++) {
      config = configs[i]
      if (config.indexOf('npm-registry') != -1) {
        index = config.indexOf('=')
        haibu.config.set('registry', config.substring(index + 1)) 
      }
      if (config.indexOf('npm-strict-ssl') != -1) {
        index = config.indexOf('=')
        haibu.config.set('strict-ssl', config.substring(index + 1)) 
      }
      if (config.indexOf('timeout-autostart-home') != -1) {
        index = config.indexOf('=')
        haibu.config.set('timeout-home', config.substring(index + 1)) 
      }
      if (config.indexOf('timeout-autostart-ds') != -1) {
        index = config.indexOf('=')
        haibu.config.set('timeout-ds', config.substring(index + 1)) 
      }
    }
  }

  haibu.drone.start({
    env: env,
    port: port,
    host: address
  }, function () {
    haibu.utils.showWelcome('api-server', address, port);
  });
};


// If no command was given, immediately start haibu.
if (app.argv._.length == 0 && !app.argv.help) {
  start();
}
else {
  app.start();
}


// Ensure that all drones are stopped when a SIGTERM signal
// is received (supervisor sends SIGTERM signals to kill its running process,
// so in most Cozy installations it lets process spawned by Cozy Controller
// as zombie process if the SIGTERM signal is not properly catched).
stopDrones = function(callback) {
  haibu.running.drone.destroy(false, function () {
    callback();
  });
}

process.on('SIGTERM', function() {
  stopDrones(function() {
    process.exit(0);
  });
});
